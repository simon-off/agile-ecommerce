// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231019090958_AddOrderRelatedTables")]
    partial class AddOrderRelatedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductEntitySizeEntity", b =>
                {
                    b.Property<int>("AvailableSizesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AvailableSizesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductEntitySizeEntity");

                    b.HasData(
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 1
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 1
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 1
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 1
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 1
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 1
                        },
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 2
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 2
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 2
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 2
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 2
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 2
                        },
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 3
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 3
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 3
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 3
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 3
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 3
                        },
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 4
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 4
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 4
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 4
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 4
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 4
                        },
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 5
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 5
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 5
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 5
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 5
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 5
                        },
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 6
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 6
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 6
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 6
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 6
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 6
                        },
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 7
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 7
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 7
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 7
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 7
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 7
                        },
                        new
                        {
                            AvailableSizesId = 1,
                            ProductsId = 8
                        },
                        new
                        {
                            AvailableSizesId = 2,
                            ProductsId = 8
                        },
                        new
                        {
                            AvailableSizesId = 3,
                            ProductsId = 8
                        },
                        new
                        {
                            AvailableSizesId = 4,
                            ProductsId = 8
                        },
                        new
                        {
                            AvailableSizesId = 5,
                            ProductsId = 8
                        },
                        new
                        {
                            AvailableSizesId = 6,
                            ProductsId = 8
                        });
                });

            modelBuilder.Entity("ProductEntityTagEntity", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProductEntityTagEntity");

                    b.HasData(
                        new
                        {
                            ProductsId = 1,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 1,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 1,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 2,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 2,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 2,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 3,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 3,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 3,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 4,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 4,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 4,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 5,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 5,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 5,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 6,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 6,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 6,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 7,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 7,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 7,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 8,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 8,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 8,
                            TagsId = 3
                        },
                        new
                        {
                            ProductsId = 1,
                            TagsId = 4
                        },
                        new
                        {
                            ProductsId = 2,
                            TagsId = 5
                        },
                        new
                        {
                            ProductsId = 5,
                            TagsId = 6
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pants"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Footwear"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Headwear"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Underwear"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Suits"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MyProperty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.OrderItemEntity", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SizeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "SizeId", "OrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Stay warm and stylish this winter with our cozy knit sweater. It's perfect for chilly days and features a classic design that goes well with any outfit.",
                            Name = "Cozy Winter Sweater",
                            Price = 59.99m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Description = "A wardrobe essential! Our classic denim jeans offer a timeless look and a comfortable fit. Whether you're dressing up or going casual, these jeans have you covered.",
                            Name = "Classic Denim Jeans",
                            Price = 39.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 7,
                            Description = "Dazzle at your next special occasion with our elegant evening dress. This gown features intricate lace details and a flattering silhouette that's sure to turn heads.",
                            Name = "Elegant Evening Dress",
                            Price = 129.99m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Spend your weekends in comfort and style with our casual t-shirt. It's made from soft, breathable fabric and comes in various colors to suit your mood.",
                            Name = "Casual Weekend T-Shirt",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Get active in our sporty jogging pants. These pants are designed for maximum comfort during workouts and leisure activities. Stay on the move with confidence.",
                            Name = "Sporty Jogging Pants",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Achieve a timeless, edgy look with our chic leather jacket. Crafted from high-quality leather, it's a versatile piece that adds an element of sophistication to any outfit.",
                            Name = "Chic Leather Jacket",
                            Price = 79.99m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "Ready for some fun in the sun? Our summer beach shorts are perfect for beach days and pool parties. They come in vibrant colors and are quick-drying for your comfort.",
                            Name = "Summer Beach Shorts",
                            Price = 24.99m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 9,
                            Description = "Make a professional statement with our formal business suit. It's tailored to perfection, exuding confidence and style. Ideal for meetings and special events.",
                            Name = "Formal Business Suit",
                            Price = 199.99m
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Entities.ProductImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 8,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 9,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 10,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 11,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 12,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 13,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 14,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 15,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 16,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 17,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 18,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 19,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 20,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 21,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 22,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 23,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 24,
                            Path = "/images/products/product-template-image.png",
                            ProductId = 8
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Entities.SizeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "S"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M"
                        },
                        new
                        {
                            Id = 4,
                            Name = "L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "XXL"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Entities.StatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Featured"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Popular"
                        },
                        new
                        {
                            Id = 3,
                            Name = "New"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Unisex"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sport"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductEntitySizeEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Entities.SizeEntity", null)
                        .WithMany()
                        .HasForeignKey("AvailableSizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductEntityTagEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Models.Entities.AddressEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.OrderEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebAPI.Models.Entities.StatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Entities.OrderEntity", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Entities.SizeEntity", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.ProductEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.ProductImageEntity", b =>
                {
                    b.HasOne("WebAPI.Models.Entities.ProductEntity", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAPI.Models.Entities.ProductEntity", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
